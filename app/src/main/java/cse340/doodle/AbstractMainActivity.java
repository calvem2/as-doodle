package cse340.doodle;

import android.content.Intent;
import android.graphics.PointF;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.util.Log;
import android.widget.FrameLayout;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

import cse340.doodle.DimHelp;
import cse340.doodle.R;
import cse340.doodle.TabActivity;
import cse340.doodle.TabView;

/* ********************************************************************************************** *
 * ********************************************************************************************** *
 *                      DO NOT EDIT THIS FILE, PLEASE, DO NOT EDIT THIS FILE                      *
 * ********************************************************************************************** *
 * ********************************************************************************************** */

/**
 * This class describes the requirements of a AbstractMainActivity (addLine, addText, addImage) and
 * provides some convenience methods and PHONE_DIMS. I'd recommend
 * that you take a look through this class.
 *
 * @author rfrowe
 * @version 1.0
 */
public abstract class AbstractMainActivity extends TabActivity {
    /**
     * Current phone dimensions, in dp, for your convenience.
     * Display width is stored in PHONE_DIMS.x and height in PHONE_DIMS.y.
     */
    protected static final PointF PHONE_DIMS = new PointF();

    /**
     * Callback that is called when the activity is first created.
     * @param savedInstanceState contains the activity's previously saved state
     */
    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Sets the UI layout to this activity.
        setContentView(R.layout.activity_main);

        // Finds View from UI layout to add content onto it.
        FrameLayout doodleView = findViewById(R.id.doodleView);
        TabView nav = findViewById(R.id.bottom_nav);   // Tabs at the bottom of screen.
        setMenu(nav);
        nav.setTabHolder(this);

        // Register callback on item selected. This is called each time a tab is pressed.
        nav.setOnNavigationItemSelectedListener((item) -> {
            // Set tab contents based on selected item.
            if (getSavedTabId(savedInstanceState, -1) == item.getItemId()) {
                Log.i("CSE340", "no need to switch state");
                return false;
            }
            switch (item.getItemId()) {
                case R.id.action_part_1:
                    setCurrentTabId(R.id.action_part_1);
                    startActivity(new Intent(getApplicationContext(), cse340.doodle.Part1Activity.class));
                    overridePendingTransition(0,0);
                    return true;
                case R.id.action_part_2:
                    setCurrentTabId(R.id.action_part_2);
                    startActivity(new Intent(getApplicationContext(), cse340.doodle.Part1BActivity.class));
                    overridePendingTransition(0,0);
                    return true;
                case R.id.action_part_3:
                    setCurrentTabId(R.id.action_part_3);
                    startActivity(new Intent(getApplicationContext(), cse340.doodle.Part2Activity.class));
                    overridePendingTransition(0,0);
                    return true;
            }
            return false;
        });

        doodleView.removeAllViews();  // Clear the currently displayed view.
        PHONE_DIMS.x = DimHelp.getDisplayWidthDP(this);
        PHONE_DIMS.y = DimHelp.getDisplayHeightDP(this);

        // Show
        doodle(doodleView);
    }

    /**
     * This is the function that does the actual doodling! It gets a doodleView and can then
     * call addLine, addCircle, addImage, and addText to doodle on the it.
     *
     * @param doodleView    Canvas on which to doodle.
     */
    public abstract void doodle(FrameLayout doodleView);

    /**
     * Adds all of the images from the given file name to the screen.
     * The images are added at the locations and in the sizes given in the file.
     * The format of the file MUST be
     * resource name,xLocation,yLocation,size
     * And must NOT have an extra line at the end of the file.
     * @param doodleView The view to add the images to
     * @param filename The filename that contains the image file names and locations
     */
    public void addAllImagesFromData(FrameLayout doodleView, String filename) {
        // The data files were designed for a phone screen with the following dimensions
        float presumed_x = 1440; // dp
        float presumed_y = 2712; // dp

        Scanner scan = openAssetFile(filename);
        if (scan != null) {
            while (scan.hasNextLine()) {
                String line = scan.nextLine();
                if (line.length() > 0) {
                    Scanner lineScan = new Scanner(line);
                    lineScan.useDelimiter(",");
                    String name = "";
                    float x = 0;
                    float y = 0;
                    float size = 0;
                    String description = "";
                    boolean error = false;
                    // Check to make sure the file is has the right format:
                    if (lineScan.hasNext()) {
                        name = lineScan.next();
                    }
                    if (name.length() > 0) {  // only process a line if we have a resource name
                        error = !lineScan.hasNextFloat();
                        if (!error) {
                            // adjust x to the actual phone dimensions
                            x = lineScan.nextFloat()*(PHONE_DIMS.x/presumed_x);
                        }
                        error = !lineScan.hasNextFloat();
                        if (!error) {
                            // adjust y to the actual phone dimensions
                            y = lineScan.nextFloat()*(PHONE_DIMS.y/presumed_y);
                        }
                        error = !lineScan.hasNextInt();
                        if (!error) {
                            size = lineScan.nextInt();
                        }

                        error = !lineScan.hasNext(".*");
                        if (!error) {
                            description = lineScan.next(".*");
                        } else {
                            description = name;
                            error = false;
                        }

                        if (!error) {
                            DrawView drawView = new DrawView(this, name, description, this.getPackageName(), x, y, size);
                            doodleView.addView(drawView);
                        } else {
                            throw new IllegalStateException(filename + " is malformed");
                        }
                    }
                }
            }
        }
    }

    /**
     * Opens the asset file for reading. Returns a valid scanner
     * @param filename The filename that contains the image file names and locations
     * @return A valid scanner on the file, if it can be open for reading, or null if not.
     */
    private Scanner openAssetFile(String filename) {
        Scanner scan = null;
        try {
            scan = new Scanner(new InputStreamReader(getAssets().open(filename)));
        } catch (IOException e) {
            throw new IllegalStateException(filename + " not found in assets");
        }
        return scan;
    }
}

